colnames(nodes)<-c("id") #final edits to node and edge datasets
nodes<-merge(nodes,attributes,by = c("id"))
nrow(nodes); length(unique(nodes$id))
nrow(links); nrow(unique(links[,c("from", "to")]))
#build the network
g <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
plot(g, edge.arrow.size=.4,vertex.label=NA)
#intro OTU table: all numeric, OTUnames as columns
getwd()
data = read.csv("jing.csv")
data<-data[1:15,]
attributes = read.csv("jing_att.csv")
attributes<- attributes[1:15,]
#intro OTU table: all numeric, OTUnames as columns
getwd()
data = read.csv("jing.csv")
attributes = read.csv("jing_att.csv")
View(attributes)
View(data)
#intro OTU table: all numeric, OTUnames as columns
getwd()
data<-NULL
attributes<-NULL
data = read.csv("jing.csv")
attributes = read.csv("jing_att.csv")
#intro OTU table: all numeric, OTUnames as columns
getwd()
data<-NULL
attributes<-NULL
data = read.csv("jing.csv")
attributes = read.csv("jing_att.csv")
data<-NULL
data = read.csv("jing.csv")
#intro OTU table: all numeric, OTUnames as columns
getwd()
data<-NULL
attributes<-NULL
data = read.csv("jing2.csv")
attributes = read.csv("jing_att.csv")
#cor fucntion to generate all potential correlations between OTUs
coc<- rcorr(as.matrix(data), type=c("spearman"))
coc$r<-abs(coc$r) #take negative values out to apply a cutoff of >0.65 Spearman rank correlation
cocr<-as.data.frame(coc$r)
cocp<-as.data.frame(coc$P)
subcoc<-list()
nom<-as.vector(colnames(cocr))
for(i in 1:ncol(cocr)){
subcoc[[i]] <- subset(cocr, cocr[,i] > 0.8 & cocp[,i] < 0.01, select = c(nom[[i]]))
} #this will generate a list of as many elements as OTUs, each element contains a vector with only OTU correlations above the predetermined cutoff (r=0.6 and p-value 0.5 here)
subcoc2<- matrix(0,ncol=3,nrow=0)
subcoc2<-data.frame(subcoc2)
colnames(subcoc2) <- c("sp1", "cor","sp2")
for(i in 1:length(subcoc)){
temp<-as.data.frame(subcoc[[i]])
temp<- setDT(temp, keep.rownames = TRUE)[]
v <- rep(colnames(temp[,2]), nrow(temp))
temp<- mutate(temp, dr = v)
colnames(temp) <- c("sp1", "cor","sp2")
subcoc2<-rbind(subcoc2,temp)
remove(temp)
} #resulting dataset contains edge information for network
links<-subcoc2[,c("sp2","sp1","cor")]
colnames(links)<-c("from", "to","weight")
nodes <-as.data.frame(unique(subcoc2[,3]))
colnames(nodes)<-c("id") #final edits to node and edge datasets
nodes<-merge(nodes,attributes,by = c("id"))
nrow(nodes); length(unique(nodes$id))
nrow(links); nrow(unique(links[,c("from", "to")]))
#build the network
g <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
plot(g, edge.arrow.size=.4,vertex.label=NA)
#cor fucntion to generate all potential correlations between OTUs
coc<- rcorr(as.matrix(data), type=c("pearson"))
coc$r<-abs(coc$r) #take negative values out to apply a cutoff of >0.65 Spearman rank correlation
cocr<-as.data.frame(coc$r)
cocp<-as.data.frame(coc$P)
subcoc<-list()
nom<-as.vector(colnames(cocr))
for(i in 1:ncol(cocr)){
subcoc[[i]] <- subset(cocr, cocr[,i] > 0.8 & cocp[,i] < 0.01, select = c(nom[[i]]))
} #this will generate a list of as many elements as OTUs, each element contains a vector with only OTU correlations above the predetermined cutoff (r=0.6 and p-value 0.5 here)
subcoc2<- matrix(0,ncol=3,nrow=0)
subcoc2<-data.frame(subcoc2)
colnames(subcoc2) <- c("sp1", "cor","sp2")
for(i in 1:length(subcoc)){
temp<-as.data.frame(subcoc[[i]])
temp<- setDT(temp, keep.rownames = TRUE)[]
v <- rep(colnames(temp[,2]), nrow(temp))
temp<- mutate(temp, dr = v)
colnames(temp) <- c("sp1", "cor","sp2")
subcoc2<-rbind(subcoc2,temp)
remove(temp)
} #resulting dataset contains edge information for network
links<-subcoc2[,c("sp2","sp1","cor")]
colnames(links)<-c("from", "to","weight")
nodes <-as.data.frame(unique(subcoc2[,3]))
colnames(nodes)<-c("id") #final edits to node and edge datasets
nodes<-merge(nodes,attributes,by = c("id"))
nrow(nodes); length(unique(nodes$id))
nrow(links); nrow(unique(links[,c("from", "to")]))
#build the network
g <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
plot(g, edge.arrow.size=.4,vertex.label=NA)
#cor fucntion to generate all potential correlations between OTUs
coc<- rcorr(as.matrix(data), type=c("spearman"))
coc$r<-abs(coc$r) #take negative values out to apply a cutoff of >0.65 Spearman rank correlation
cocr<-as.data.frame(coc$r)
cocp<-as.data.frame(coc$P)
subcoc<-list()
nom<-as.vector(colnames(cocr))
for(i in 1:ncol(cocr)){
subcoc[[i]] <- subset(cocr, cocr[,i] > 0.9 & cocp[,i] < 0.001, select = c(nom[[i]]))
} #this will generate a list of as many elements as OTUs, each element contains a vector with only OTU correlations above the predetermined cutoff (r=0.6 and p-value 0.5 here)
subcoc2<- matrix(0,ncol=3,nrow=0)
subcoc2<-data.frame(subcoc2)
colnames(subcoc2) <- c("sp1", "cor","sp2")
for(i in 1:length(subcoc)){
temp<-as.data.frame(subcoc[[i]])
temp<- setDT(temp, keep.rownames = TRUE)[]
v <- rep(colnames(temp[,2]), nrow(temp))
temp<- mutate(temp, dr = v)
colnames(temp) <- c("sp1", "cor","sp2")
subcoc2<-rbind(subcoc2,temp)
remove(temp)
} #resulting dataset contains edge information for network
links<-subcoc2[,c("sp2","sp1","cor")]
colnames(links)<-c("from", "to","weight")
nodes <-as.data.frame(unique(subcoc2[,3]))
colnames(nodes)<-c("id") #final edits to node and edge datasets
nodes<-merge(nodes,attributes,by = c("id"))
nrow(nodes); length(unique(nodes$id))
nrow(links); nrow(unique(links[,c("from", "to")]))
#build the network
g <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
plot(g, edge.arrow.size=.4,vertex.label=NA)
#cor fucntion to generate all potential correlations between OTUs
coc<- rcorr(as.matrix(data), type=c("spearman"))
coc$r<-abs(coc$r) #take negative values out to apply a cutoff of >0.65 Spearman rank correlation
cocr<-as.data.frame(coc$r)
cocp<-as.data.frame(coc$P)
subcoc<-list()
nom<-as.vector(colnames(cocr))
for(i in 1:ncol(cocr)){
subcoc[[i]] <- subset(cocr, cocr[,i] > 0.95 & cocp[,i] < 0.001, select = c(nom[[i]]))
} #this will generate a list of as many elements as OTUs, each element contains a vector with only OTU correlations above the predetermined cutoff (r=0.6 and p-value 0.5 here)
subcoc2<- matrix(0,ncol=3,nrow=0)
subcoc2<-data.frame(subcoc2)
colnames(subcoc2) <- c("sp1", "cor","sp2")
for(i in 1:length(subcoc)){
temp<-as.data.frame(subcoc[[i]])
temp<- setDT(temp, keep.rownames = TRUE)[]
v <- rep(colnames(temp[,2]), nrow(temp))
temp<- mutate(temp, dr = v)
colnames(temp) <- c("sp1", "cor","sp2")
subcoc2<-rbind(subcoc2,temp)
remove(temp)
} #resulting dataset contains edge information for network
links<-subcoc2[,c("sp2","sp1","cor")]
colnames(links)<-c("from", "to","weight")
nodes <-as.data.frame(unique(subcoc2[,3]))
colnames(nodes)<-c("id") #final edits to node and edge datasets
nodes<-merge(nodes,attributes,by = c("id"))
nrow(nodes); length(unique(nodes$id))
nrow(links); nrow(unique(links[,c("from", "to")]))
#build the network
g <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
plot(g, edge.arrow.size=.4,vertex.label=NA)
#intro OTU table: all numeric, OTUnames as columns
getwd()
data<-NULL
attributes<-NULL
data = read.csv("jing2.csv")
attributes = read.csv("jing_att.csv")
#intro OTU table: all numeric, OTUnames as columns
getwd()
data<-NULL
attributes<-NULL
data = read.csv("jing2.csv")
attributes = read.csv("jing_att.csv")
#cor fucntion to generate all potential correlations between OTUs
coc<- rcorr(as.matrix(data), type=c("spearman"))
coc$r<-abs(coc$r) #take negative values out to apply a cutoff of >0.65 Spearman rank correlation
cocr<-as.data.frame(coc$r)
cocp<-as.data.frame(coc$P)
subcoc<-list()
nom<-as.vector(colnames(cocr))
for(i in 1:ncol(cocr)){
subcoc[[i]] <- subset(cocr, cocr[,i] > 0.95 & cocp[,i] < 0.001, select = c(nom[[i]]))
} #this will generate a list of as many elements as OTUs, each element contains a vector with only OTU correlations above the predetermined cutoff (r=0.6 and p-value 0.5 here)
subcoc2<- matrix(0,ncol=3,nrow=0)
subcoc2<-data.frame(subcoc2)
colnames(subcoc2) <- c("sp1", "cor","sp2")
for(i in 1:length(subcoc)){
temp<-as.data.frame(subcoc[[i]])
temp<- setDT(temp, keep.rownames = TRUE)[]
v <- rep(colnames(temp[,2]), nrow(temp))
temp<- mutate(temp, dr = v)
colnames(temp) <- c("sp1", "cor","sp2")
subcoc2<-rbind(subcoc2,temp)
remove(temp)
} #resulting dataset contains edge information for network
links<-subcoc2[,c("sp2","sp1","cor")]
colnames(links)<-c("from", "to","weight")
nodes <-as.data.frame(unique(subcoc2[,3]))
colnames(nodes)<-c("id") #final edits to node and edge datasets
nodes<-merge(nodes,attributes,by = c("id"))
nrow(nodes); length(unique(nodes$id))
nrow(links); nrow(unique(links[,c("from", "to")]))
#build the network
g <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
plot(g, edge.arrow.size=.4,vertex.label=NA)
# Converts the given igraph object to GEXF format and saves it at the given filepath location
#     g: input igraph object to be converted to gexf format
#     filepath: file location where the output gexf file should be saved
#
saveAsGEXF = function(g, filepath="proba.gexf")
{
require(igraph)
require(rgexf)
if(is.null(V(g)$label))
V(g)$label <- as.character(V(g))
if(is.null(E(g)$weight))
E(g)$weight <- rep.int(1, ecount(g))
nodes <- data.frame(cbind(V(g), V(g)$label))
edges <- t(Vectorize(get.edge, vectorize.args='id')(g, 1:ecount(g)))
vAttrNames <- setdiff(list.vertex.attributes(g), "label")
nodesAtt <- data.frame(sapply(vAttrNames, function(attr) sub("&", "&",get.vertex.attribute(g, attr))))
eAttrNames <- setdiff(list.edge.attributes(g), "weight")
edgesAtt <- data.frame(sapply(eAttrNames, function(attr) sub("&", "&",get.edge.attribute(g, attr))))
graphAtt <- sapply(list.graph.attributes(g), function(attr) sub("&", "&",get.graph.attribute(g, attr)))
output <- write.gexf(nodes, edges,
edgesWeight=E(g)$weight,
edgesAtt = edgesAtt,
nodesAtt = nodesAtt,
meta=c(list(creator="Gopalakrishna Palem", description="igraph -> gexf converted file", keywords="igraph, gexf, R, rgexf"), graphAtt))
print(output, filepath, replace=T)
}
saveAsGEXF(g,filepath="/Users/marc_peipoch/Dropbox/a.temp/network.gexf")
#cor fucntion to generate all potential correlations between OTUs
coc<- rcorr(as.matrix(data), type=c("pearson"))
coc$r<-abs(coc$r) #take negative values out to apply a cutoff of >0.65 Spearman rank correlation
cocr<-as.data.frame(coc$r)
cocp<-as.data.frame(coc$P)
cocr
#cor fucntion to generate all potential correlations between OTUs
coc<- rcorr(as.matrix(data), type=c("spearman"))
coc$r<-abs(coc$r) #take negative values out to apply a cutoff of >0.65 Spearman rank correlation
cocr<-as.data.frame(coc$r)
cocp<-as.data.frame(coc$P)
cocr
coc
#cor fucntion to generate all potential correlations between OTUs
coc<- rcorr(as.matrix(data), type=c("spearman"))
coc
data
View(data)
getwd()
species = read.csv("anosim.csv")
species_NMDS <- species[,2:7811]
rownames(species_NMDS) <- paste(species$id, species$id,sep=" ")
example_NMDS=metaMDS(species_NMDS,k=2,trymax=10000)
library(vegan)
example_NMDS=metaMDS(species_NMDS,k=2,trymax=10000)
anosim(species_NMDS, species$id, permutations=999)
getwd()
species = read.csv("anosim.csv")
anosim(species_NMDS, species$id, permutations=999)
#necessary packages:
library("data.table")
library("dplyr")
library("igraph")
library("stringi")
library("Hmisc")
library("rgexf")
#intro OTU table: all numeric, OTUnames as columns
getwd()
data = read.csv("data.csv")
attributes = read.csv("attributes.csv")
#cor fucntion to generate all potential correlations between OTUs
coc<- rcorr(as.matrix(data), type=c("spearman"))
cocr<-as.data.frame(coc$r)
cocp<-as.data.frame(coc$P)
cocr
subcoc<-list()
nom<-as.vector(colnames(cocr))
for(i in 1:ncol(cocr)){
subcoc[[i]] <- subset(cocr, cocr[,i] > 0.6 | cocr[,i] < 0.6 & cocp[,i] < 0.01, select = c(nom[[i]]))
} #this will generate a list of as many elements as OTUs, each element contains a vector with only OTU correlations above the predetermined cutoff (r=0.6 and p-value 0.5 here)
subcoc2<- matrix(0,ncol=3,nrow=0)
subcoc2<-data.frame(subcoc2)
colnames(subcoc2) <- c("sp1", "cor","sp2")
for(i in 1:length(subcoc)){
temp<-as.data.frame(subcoc[[i]])
temp<- setDT(temp, keep.rownames = TRUE)[]
v <- rep(colnames(temp[,2]), nrow(temp))
temp<- mutate(temp, dr = v)
colnames(temp) <- c("sp1", "cor","sp2")
subcoc2<-rbind(subcoc2,temp)
remove(temp)
} #resulting dataset contains edge information for network
links<-subcoc2[,c("sp2","sp1","cor")]
colnames(links)<-c("from", "to","weight")
nodes <-as.data.frame(unique(subcoc2[,3]))
colnames(nodes)<-c("id") #final edits to node and edge datasets
nodes<-merge(nodes,attributes,by = c("id"))
nrow(nodes); length(unique(nodes$id))
nrow(links); nrow(unique(links[,c("from", "to")]))
#build the network
g <- graph.data.frame(d=links, vertices=nodes, directed=T)
# Converts the given igraph object to GEXF format and saves it at the given filepath location
#     g: input igraph object to be converted to gexf format
#     filepath: file location where the output gexf file should be saved
#
saveAsGEXF = function(g, filepath="proba.gexf")
{
require(igraph)
require(rgexf)
if(is.null(V(g)$label))
V(g)$label <- as.character(V(g))
if(is.null(E(g)$weight))
E(g)$weight <- rep.int(1, ecount(g))
nodes <- data.frame(cbind(V(g), V(g)$label))
edges <- t(Vectorize(get.edge, vectorize.args='id')(g, 1:ecount(g)))
vAttrNames <- setdiff(list.vertex.attributes(g), "label")
nodesAtt <- data.frame(sapply(vAttrNames, function(attr) sub("&", "&",get.vertex.attribute(g, attr))))
eAttrNames <- setdiff(list.edge.attributes(g), "weight")
edgesAtt <- data.frame(sapply(eAttrNames, function(attr) sub("&", "&",get.edge.attribute(g, attr))))
graphAtt <- sapply(list.graph.attributes(g), function(attr) sub("&", "&",get.graph.attribute(g, attr)))
output <- write.gexf(nodes, edges,
edgesWeight=E(g)$weight,
edgesAtt = edgesAtt,
nodesAtt = nodesAtt,
meta=c(list(creator="Gopalakrishna Palem", description="igraph -> gexf converted file", keywords="igraph, gexf, R, rgexf"), graphAtt))
print(output, filepath, replace=T)
}
saveAsGEXF(g,filepath="C:/Users/admin/Dropbox/b.mscripts/biofilmMARC/Manuscript/Figures/Network/temp.gexf")
saveAsGEXF(g,filepath="C:/Users/marc_peipoch/Dropbox/b.mscripts/biofilmMARC/Manuscript/Figures/Network/temp.gexf")
saveAsGEXF(g,filepath="C:/Users/marc_peipoch/Dropbox/b.mscripts/biofilmMARC/Manuscript/Figures/Network/temp.gexf")
#cor fucntion to generate all potential correlations between OTUs
coc<- rcorr(as.matrix(data), type=c("spearman"))
cocr<-as.data.frame(coc$r)
cocp<-as.data.frame(coc$P)
subcoc<-list()
nom<-as.vector(colnames(cocr))
for(i in 1:ncol(cocr)){
subcoc[[i]] <- subset(cocr, cocr[,i] > 0.6 | cocr[,i] < -0.6 & cocp[,i] < 0.01, select = c(nom[[i]]))
} #this will generate a list of as many elements as OTUs, each element contains a vector with only OTU correlations above the predetermined cutoff (r=0.6 and p-value 0.5 here)
subcoc2<- matrix(0,ncol=3,nrow=0)
subcoc2<-data.frame(subcoc2)
colnames(subcoc2) <- c("sp1", "cor","sp2")
for(i in 1:length(subcoc)){
temp<-as.data.frame(subcoc[[i]])
temp<- setDT(temp, keep.rownames = TRUE)[]
v <- rep(colnames(temp[,2]), nrow(temp))
temp<- mutate(temp, dr = v)
colnames(temp) <- c("sp1", "cor","sp2")
subcoc2<-rbind(subcoc2,temp)
remove(temp)
} #resulting dataset contains edge information for network
links<-subcoc2[,c("sp2","sp1","cor")]
colnames(links)<-c("from", "to","weight")
nodes <-as.data.frame(unique(subcoc2[,3]))
colnames(nodes)<-c("id") #final edits to node and edge datasets
nodes<-merge(nodes,attributes,by = c("id"))
nrow(nodes); length(unique(nodes$id))
nrow(links); nrow(unique(links[,c("from", "to")]))
#build the network
g <- graph.data.frame(d=links, vertices=nodes, directed=T)
# Converts the given igraph object to GEXF format and saves it at the given filepath location
#     g: input igraph object to be converted to gexf format
#     filepath: file location where the output gexf file should be saved
#
saveAsGEXF = function(g, filepath="proba.gexf")
{
require(igraph)
require(rgexf)
if(is.null(V(g)$label))
V(g)$label <- as.character(V(g))
if(is.null(E(g)$weight))
E(g)$weight <- rep.int(1, ecount(g))
nodes <- data.frame(cbind(V(g), V(g)$label))
edges <- t(Vectorize(get.edge, vectorize.args='id')(g, 1:ecount(g)))
vAttrNames <- setdiff(list.vertex.attributes(g), "label")
nodesAtt <- data.frame(sapply(vAttrNames, function(attr) sub("&", "&",get.vertex.attribute(g, attr))))
eAttrNames <- setdiff(list.edge.attributes(g), "weight")
edgesAtt <- data.frame(sapply(eAttrNames, function(attr) sub("&", "&",get.edge.attribute(g, attr))))
graphAtt <- sapply(list.graph.attributes(g), function(attr) sub("&", "&",get.graph.attribute(g, attr)))
output <- write.gexf(nodes, edges,
edgesWeight=E(g)$weight,
edgesAtt = edgesAtt,
nodesAtt = nodesAtt,
meta=c(list(creator="Gopalakrishna Palem", description="igraph -> gexf converted file", keywords="igraph, gexf, R, rgexf"), graphAtt))
print(output, filepath, replace=T)
}
saveAsGEXF(g,filepath="C:/Users/marc_peipoch/Dropbox/b.mscripts/biofilmMARC/Manuscript/Figures/Network/temp.gexf")
g
#cor fucntion to generate all potential correlations between OTUs
coc<- rcorr(as.matrix(data), type=c("spearman"))
coc$r<-abs(coc$r) #take negatve values out to apply a cutoff of >0.65 Spearman rank correlation
cocr<-as.data.frame(coc$r)
cocp<-as.data.frame(coc$P)
subcoc<-list()
nom<-as.vector(colnames(cocr))
for(i in 1:ncol(cocr)){
subcoc[[i]] <- subset(cocr, cocr[,i] > 0.6  & cocp[,i] < 0.01, select = c(nom[[i]]))
} #this will generate a list of as many elements as OTUs, each element contains a vector with only OTU correlations above the predetermined cutoff (r=0.6 and p-value 0.5 here)
subcoc2<- matrix(0,ncol=3,nrow=0)
subcoc2<-data.frame(subcoc2)
colnames(subcoc2) <- c("sp1", "cor","sp2")
for(i in 1:length(subcoc)){
temp<-as.data.frame(subcoc[[i]])
temp<- setDT(temp, keep.rownames = TRUE)[]
v <- rep(colnames(temp[,2]), nrow(temp))
temp<- mutate(temp, dr = v)
colnames(temp) <- c("sp1", "cor","sp2")
subcoc2<-rbind(subcoc2,temp)
remove(temp)
} #resulting dataset contains edge information for network
links<-subcoc2[,c("sp2","sp1","cor")]
colnames(links)<-c("from", "to","weight")
nodes <-as.data.frame(unique(subcoc2[,3]))
colnames(nodes)<-c("id") #final edits to node and edge datasets
nodes<-merge(nodes,attributes,by = c("id"))
nrow(nodes); length(unique(nodes$id))
nrow(links); nrow(unique(links[,c("from", "to")]))
#build the network
g <- graph.data.frame(d=links, vertices=nodes, directed=T)
g
#cor fucntion to generate all potential correlations between OTUs
coc<- rcorr(as.matrix(data), type=c("spearman"))
cocr<-as.data.frame(coc$r)
cocp<-as.data.frame(coc$P)
subcoc<-list()
nom<-as.vector(colnames(cocr))
for(i in 1:ncol(cocr)){
subcoc[[i]] <- subset(cocr, cocr[,i] > 0.6 | cocr[,i] < -0.6 & cocp[,i] < 0.01, select = c(nom[[i]]))
} #this will generate a list of as many elements as OTUs, each element contains a vector with only OTU correlations above the predetermined cutoff (r=0.6 and p-value 0.5 here)
subcoc2<- matrix(0,ncol=3,nrow=0)
subcoc2<-data.frame(subcoc2)
colnames(subcoc2) <- c("sp1", "cor","sp2")
for(i in 1:length(subcoc)){
temp<-as.data.frame(subcoc[[i]])
temp<- setDT(temp, keep.rownames = TRUE)[]
v <- rep(colnames(temp[,2]), nrow(temp))
temp<- mutate(temp, dr = v)
colnames(temp) <- c("sp1", "cor","sp2")
subcoc2<-rbind(subcoc2,temp)
remove(temp)
} #resulting dataset contains edge information for network
links<-subcoc2[,c("sp2","sp1","cor")]
colnames(links)<-c("from", "to","weight")
nodes <-as.data.frame(unique(subcoc2[,3]))
colnames(nodes)<-c("id") #final edits to node and edge datasets
nodes<-merge(nodes,attributes,by = c("id"))
nrow(nodes); length(unique(nodes$id))
nrow(links); nrow(unique(links[,c("from", "to")]))
#build the network
g <- graph.data.frame(d=links, vertices=nodes, directed=T)
# Converts the given igraph object to GEXF format and saves it at the given filepath location
#     g: input igraph object to be converted to gexf format
#     filepath: file location where the output gexf file should be saved
#
saveAsGEXF = function(g, filepath="proba.gexf")
{
require(igraph)
require(rgexf)
if(is.null(V(g)$label))
V(g)$label <- as.character(V(g))
if(is.null(E(g)$weight))
E(g)$weight <- rep.int(1, ecount(g))
nodes <- data.frame(cbind(V(g), V(g)$label))
edges <- t(Vectorize(get.edge, vectorize.args='id')(g, 1:ecount(g)))
vAttrNames <- setdiff(list.vertex.attributes(g), "label")
nodesAtt <- data.frame(sapply(vAttrNames, function(attr) sub("&", "&",get.vertex.attribute(g, attr))))
eAttrNames <- setdiff(list.edge.attributes(g), "weight")
edgesAtt <- data.frame(sapply(eAttrNames, function(attr) sub("&", "&",get.edge.attribute(g, attr))))
graphAtt <- sapply(list.graph.attributes(g), function(attr) sub("&", "&",get.graph.attribute(g, attr)))
output <- write.gexf(nodes, edges,
edgesWeight=E(g)$weight,
edgesAtt = edgesAtt,
nodesAtt = nodesAtt,
meta=c(list(creator="Gopalakrishna Palem", description="igraph -> gexf converted file", keywords="igraph, gexf, R, rgexf"), graphAtt))
print(output, filepath, replace=T)
}
saveAsGEXF(g,filepath="/Users/marc_peipoch/Desktopk/temp.gexf")
# Converts the given igraph object to GEXF format and saves it at the given filepath location
#     g: input igraph object to be converted to gexf format
#     filepath: file location where the output gexf file should be saved
#
saveAsGEXF = function(g, filepath="proba.gexf")
{
require(igraph)
require(rgexf)
if(is.null(V(g)$label))
V(g)$label <- as.character(V(g))
if(is.null(E(g)$weight))
E(g)$weight <- rep.int(1, ecount(g))
nodes <- data.frame(cbind(V(g), V(g)$label))
edges <- t(Vectorize(get.edge, vectorize.args='id')(g, 1:ecount(g)))
vAttrNames <- setdiff(list.vertex.attributes(g), "label")
nodesAtt <- data.frame(sapply(vAttrNames, function(attr) sub("&", "&",get.vertex.attribute(g, attr))))
eAttrNames <- setdiff(list.edge.attributes(g), "weight")
edgesAtt <- data.frame(sapply(eAttrNames, function(attr) sub("&", "&",get.edge.attribute(g, attr))))
graphAtt <- sapply(list.graph.attributes(g), function(attr) sub("&", "&",get.graph.attribute(g, attr)))
output <- write.gexf(nodes, edges,
edgesWeight=E(g)$weight,
edgesAtt = edgesAtt,
nodesAtt = nodesAtt,
meta=c(list(creator="Gopalakrishna Palem", description="igraph -> gexf converted file", keywords="igraph, gexf, R, rgexf"), graphAtt))
print(output, filepath, replace=T)
}
saveAsGEXF(g,filepath="/Users/marc_peipoch/Desktop/temp.gexf")
